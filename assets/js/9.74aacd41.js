(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{333:function(e,t,a){"use strict";a.r(t);var n=a(7),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-搭建mybatis-plus环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-搭建mybatis-plus环境"}},[e._v("#")]),e._v(" 1.搭建MyBatis-Plus环境")]),e._v(" "),t("ol",[t("li",[e._v("依赖")])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        \x3c!--mybatisPlus依赖--\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        \x3c!--mysql数据库驱动--\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n")])])])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("springboot配置")])]),e._v(" "),t("p",[e._v("::: detail")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("server:\n  port: 7777\nspring:\n  datasource:\n    url: jdbc:mysql://124.222.237.176:22135/ruoyi?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n    username: root\n    password: zhuchenghao123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag  \n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n")])])]),t("p",[e._v(":::")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("配置easycode插件")])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("p",[t("strong",[e._v("entity")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save("/entity", ".java")\n\n##包路径（宏定义）\n#setPackageSuffix("entity")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n##表注释（宏定义）\n#tableComment("表实体类")\n@SuppressWarnings("serial")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName("$!{tableInfo.obj.name}")\npublic class $!{tableInfo.name}  {\n#foreach($column in $tableInfo.pkColumn)\n    #if(${column.comment})//${column.comment}#end\n@TableId\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}\n')])])]),t("p",[t("strong",[e._v("mapper")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("Mapper")\n\n##保存文件（宏定义）\n#save("/mapper", "Mapper.java")\n\n##包路径（宏定义）\n#setPackageSuffix("mapper")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment("表数据库访问层")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n\n')])])]),t("p",[t("strong",[e._v("service")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("Service")\n\n##保存文件（宏定义）\n#save("/service", "Service.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment("表服务接口")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n\n')])])]),t("p",[t("strong",[e._v("serviceImpl")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("ServiceImpl")\n\n##保存文件（宏定义）\n#save("/service/impl", "ServiceImpl.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service.impl")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment("表服务实现类")\n@Service\n##@Service("$!tool.firstLowerCase($tableInfo.name)Service")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n\n')])])])]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("idea可视化工具连接数据库，根据表生成文件")])]),e._v(" "),t("h2",{attrs:{id:"_2-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置"}},[e._v("#")]),e._v(" 2.配置")]),e._v(" "),t("h3",{attrs:{id:"_2-1分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1分页"}},[e._v("#")]),e._v(" 2.1分页")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("MbatisPlusConfig\n\n@Configuration\npublic class MbatisPlusConfig {\n\n    /**\n     * 3.4.0之后版本\n     * mybatis 分页拦截器\n     * @return\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("分页查询\n\t//创建page对象\n\tPage<Article> page = new Page<>(pageNum, pageSize);\n\t//带条件分页查询\n\tpage(page, queryWrapper);\n\t//拿到分页的结果\n\tList<Article> articles = page.getRecords();\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-2逻辑删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2逻辑删除"}},[e._v("#")]),e._v(" 2.2逻辑删除")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("application.yml\n\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: flag # 驼峰命名法 isDeleted\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("实体类字段上加上@TableLogic注解\n\n@TableLogic\nprivate Integer deleted;\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-3自动填充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3自动填充"}},[e._v("#")]),e._v(" 2.3自动填充")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1.注解填充字段\npublic class User {\n\n    // 注意！这里需要标记为填充字段\n    @TableField(.. fill = FieldFill.INSERT)\n    private String fillField;\n\n    ....\n}\n\npublic enum FieldFill {\n    /**\n     * 默认不处理\n     */\n    DEFAULT,\n    /**\n     * 插入填充字段\n     */\n    INSERT,\n    /**\n     * 更新填充字段\n     */\n    UPDATE,\n    /**\n     * 插入和更新填充字段\n     */\n    INSERT_UPDATE\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('自定义实现类 MyMetaObjectHandler\n@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info("start insert fill ....");\n        this.strictInsertFill(metaObject, "createTime", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐使用)\n        // 或者\n        this.strictInsertFill(metaObject, "createTime", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, "createTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info("start update fill ....");\n        this.strictUpdateFill(metaObject, "updateTime", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐)\n        // 或者\n        this.strictUpdateFill(metaObject, "updateTime", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, "updateTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n}\n')])])])]),e._v(" "),t("h2",{attrs:{id:"_3-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用"}},[e._v("#")]),e._v(" 3.使用")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("ol",[t("li",[e._v("在serviceImpl中，不需要注入mapper。使用其他service，需要注入")]),e._v(" "),t("li",[e._v("条件构建器可以链式调用")])])]),e._v(" "),t("h3",{attrs:{id:"_3-1单表使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1单表使用"}},[e._v("#")]),e._v(" 3.1单表使用")]),e._v(" "),t("p",[t("strong",[e._v("常用的方法")])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1.判断 值是否为空 不为空就加入条件\n// 如果有categoryId 加入条件\nqueryWrapper.eq(StringUtils.isNotBlank(categoryId), Article::getCategoryId, categoryId);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("2.分页查询\n\t//创建page对象\n\tPage<Article> page = new Page<>(pageNum, pageSize);\n\t//带条件分页查询\n\tpage(page, queryWrapper);\n\t//拿到分页的结果\n\tList<Article> articles = page.getRecords();\n注意：\t需要添加分页拦截器\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("MbatisPlusConfig\n\n@Configuration\npublic class MbatisPlusConfig {\n\n    /**\n     * 3.4.0之后版本\n     * mybatis 分页拦截器\n     * @return\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_3-2多表查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2多表查询"}},[e._v("#")]),e._v(" 3.2多表查询")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("使用mybatis的mapper")])]),e._v(" "),t("p",[t("strong",[e._v("基础知识")]),e._v(" --#{}和${}")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#{} 底层用PS对象，防止sql注册\n${} 字符串拼接或字符串替换\n\t拼接: 一般用于模糊查询  where userName like concat('%', #{name}, '%')\n\t替换: \n        select id=\"getByUserNameOrAddress\" resultType=\"users\">\n            select id, username, birthday, sex, address\n            from user\n            where ${columnName}  like concat('%', #{columnValue}, '%')\n        </select>\n")])])])]),e._v(" "),t("p",[t("strong",[e._v("遵循规则")])]),e._v(" "),t("ol",[t("li",[e._v("namespace需要对应mapper")]),e._v(" "),t("li",[e._v("id需要对应方法名")]),e._v(" "),t("li",[e._v("resultType需要对应返回的类型")]),e._v(" "),t("li",[e._v("xml需要和mapper相同目录")])]),e._v(" "),t("p",[t("strong",[e._v("文件模板")])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >\n<mapper namespace="mapper对应的目录">\n    <select id="方法名" resultType="返回的类型">\n        Select menu_id  From sys_role_menu WHERE role_id  IN (\n            SELECT id FROM sys_role WHERE role_code IN\n        <foreach collection="list" item="id" separator="," open="(" close=")">\n            #{id}\n        </foreach>\n        ) AND is_deleted = 0\n    </select>\n</mapper>\n')])])])]),e._v(" "),t("p",[e._v("动态SQL")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("点击查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1. <sql>:定义代码片段\n1. <include>:引用\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<sql id="allColumns">\n        id, username, birthday, sex, address\n</sql>\nselect <include refid="allColumns"></include>\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("if",[t("where",[e._v(" 条件查询")])],1)],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<select id="getByCondition" parameterType="users" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        <where>\n            <if test="userName != null and userName != \'\'"> //写传过来的值\n                and username like concat(\'%\', #{userName}, \'%\')\n            </if>\n            <if test="birthday != null">\n                and birthday = #{birthday}\n            </if>\n        </where>\n</select>\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[t("set",[e._v("条件更新")])],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<update id="updateBySet" parameterType="users">\n        update user\n        <set>\n            <if test="userName != null and userName != \'\'">\n                username = #{userName},\n            </if>\n            <if test="birthday != null">\n                birthday = #{birthday},\n            </if>\n        </set>\n        where id = #{id}\n    </update>\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[t("foreach",[e._v(":用来循环遍历  eg: id in（1,2,3)")])],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<select id="getByIds" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where id in\n            <foreach collection="array" item="id" separator="," open="(" close=")">\n                #{id}\n            </foreach>\n</select>\n')])])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("指定参数位置")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('如果入参是多个，可以通过指定参数进行传参，是实体包含不住的条件，如果某个成员变量要有区间范围内的判断，或者有俩个值进行处理，实体类实现不了\neg：查询指定日期范围内的用户\n<select id="getByBirhday" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where birthday between #{arg0} and #{arg1}\n</select>\narg0 arg1是传入参数的下标\n')])])]),t("ol",{attrs:{start:"7"}},[t("li",[e._v("入参是map")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('如果入参超过一个以上，使用map封装查询条件\n\n #{birthdayBegin}  是map中的key\n\n<select id="getByMap" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where birthday between #{birthdayBegin} and #{birthdayEnd}\n</select>\n\n测试\n@Test\n    public void testGetByMap() throws ParseException {\n        Date begin = sf.parse("1999-02-22");\n        Date end = sf.parse("2001-03-10");\n        Map map = new HashMap<>();\n        map.put("birthdayBegin", begin);\n        map.put("birthdayEnd", end);\n        List<Users> usersList = usersMapper.getByMap(map);\n        usersList.forEach(users -> System.out.println(users));\n    }\n')])])]),t("ol",{attrs:{start:"8"}},[t("li",[e._v("返回值是一行的map")])]),e._v(" "),t("p",[e._v("返回值是一行的map")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//返回值是一行map\nMap getReturnMap(Integer id);\n\n<select id="getReturnMap" parameterType="int" resultType="map">\n        select username, address\n        from user\n        where id = #{id}\n</select>\n\n测试\n\t@Test\n    public void testGetReturnMap() {\n        Map map = usersMapper.getReturnMap(18);\n        System.out.println(map.get("username"));\n        System.out.println(map.get("address"));\n    }\n结果\n{address=四川, username=123}\n')])])]),t("ol",{attrs:{start:"9"}},[t("li",[e._v("返回值是多行的map")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//返回多行的map\nList<Map> getMulMap();\n<select id="getMulMap" resultType="map">\n        select username, address\n        from user\n</select>\n测试\n\t@Test\n    public void testGetMulMap() {\n        List<Map> mapList = usersMapper.getMulMap();\n        mapList.forEach(map -> {\n            System.out.println(map);\n        });\n    }\n')])])]),t("ol",{attrs:{start:"10"}},[t("li",[e._v("解决实体类与数据库列名不一致问题")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('方法1:别名\n\t<select id="getBooksMap" resultType="map">\n        select bookid id, bookname name\n        from book\n    </select>\n方法二:resultMap映射\n    <resultMap id="bookmap" type="map">\n        <id property="id" column="bookid"></id>\n        <result property="name" column="bookname"></result>\n    </resultMap>\n    <select id="getBooksMap2" resultMap="bookmap">\n        select bookid, bookname\n        from book\n    </select>\n')])])]),t("ol",{attrs:{start:"11"}},[t("li",[e._v("多表查询")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('1.一对多\n业务需求：查询客户信息并查询名下所有订单 站在查询客户角度\nCustomer实体类的成员\n    private Integer id;\n    private String name;\n    private Integer age;\n    private List<Orders> ordersList;\nCustomerMapper.xml中配置\n    <resultMap id="customermap" type="customer">\n        <id property="id" column="cid"></id>\n        <result property="name" column="name"></result>\n        <result property="age" column="age"></result>\n        <collection property="ordersList" ofType="orders">\n            <id property="id" column="oid"></id>\n            <result property="orderNumber" column="orderNumber"></result>\n            <result property="orderPrice" column="orderPrice"></result>\n            <result property="customer_id" column="customer_id"></result>\n        </collection>\n    </resultMap>\n    <select id="getById" parameterType="int" resultMap="customermap">\n        select c.id cid, name, age, o.id oid, orderNumber, orderPrice, customer_id\n        from customer c left join orders o on c.id = o.customer_id\n        where c.id = #{id}\n    </select>\n\n2.多对一\n业务需求：查询某个订单并查询对应的客户信息 站在查询某个订单角度\n    <resultMap id="ordersmap" type="orders">\n        <id property="id" column="oid"></id>\n        <result property="orderNumber" column="orderNumber"></result>\n        <result property="orderPrice" column="orderPrice"></result>\n        <result property="customer_id" column="customer_id"></result>\n        <association property="customer" javaType="customer">\n            <id property="id" column="cid"></id>\n            <result property="name" column="name"></result>\n            <result property="age" column="age"></result>\n        </association>\n    </resultMap>\n    <select id="getById" parameterType="int" resultMap="ordersmap">\n        select o.id oid, orderNumber, orderPrice, customer_id, c.id cid, name, age\n        from orders o inner join customer c on o.customer_id = c.id\n        where o.id = #{id}\n    </select>\n    注意：\n    <association property="customer" javaType="customer"\n    \n\n总结\n无论是什么关联关系，如果某方持有另一方的集合，使用<collection>标签完成映射，如果某方持有另一方的对象，使用<association>标签完成映射\n')])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);