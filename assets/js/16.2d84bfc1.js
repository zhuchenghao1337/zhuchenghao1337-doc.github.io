(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{340:function(t,n,e){"use strict";e.r(n);var r=e(7),a=Object(r.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-必备知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-必备知识"}},[t._v("#")]),t._v(" 1.必备知识")]),t._v(" "),n("h3",{attrs:{id:"_1-1短信发送流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1短信发送流程"}},[t._v("#")]),t._v(" 1.1短信发送流程")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2023/20230327133046.png",alt:""}})]),t._v(" "),n("p",[t._v("程序整理内容和手机号给短信平台，平台与运营商合作")]),t._v(" "),n("p",[t._v("第一步：前端点击发送验证码，后端拿到手机号码，生成验证码，整理短信内容，发送短信并根据响应结果并响应最后结果。")]),t._v(" "),n("p",[t._v("第二步：用户收到短信，填写验证吗，点击登录，后端拿到验证码并进行比对，成功就登录成功。")]),t._v(" "),n("h3",{attrs:{id:"_1-2短信模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2短信模板"}},[t._v("#")]),t._v(" 1.2短信模板")]),t._v(" "),n("p",[t._v("短信模板由国家工信部审核通过以后，才能使用。")]),t._v(" "),n("p",[t._v("模板包括：")]),t._v(" "),n("ol",[n("li",[t._v("短信签名：[xxxx]")]),t._v(" "),n("li",[t._v("短信正文：你的验证码为：123456。")])]),t._v(" "),n("h3",{attrs:{id:"_1-3java发送请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3java发送请求"}},[t._v("#")]),t._v(" 1.3Java发送请求")]),t._v(" "),n("p",[t._v("使用HttpClient发送请求")]),t._v(" "),n("h2",{attrs:{id:"_2-步骤流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-步骤流程"}},[t._v("#")]),t._v(" 2.步骤流程")]),t._v(" "),n("h3",{attrs:{id:"_2-1依赖和工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1依赖和工具类"}},[t._v("#")]),t._v(" 2.1依赖和工具类")]),t._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[t._v("点击查看")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.36</version>\n        </dependency>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.*;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URI;\nimport java.util.*;\n\npublic class HttpClientUtils {\n\n    /**\n     * 编码格式。发送编码格式统一用UTF-8\n     */\n    private static final String ENCODING = "UTF-8";\n\n    /**\n     * 设置连接超时时间，单位毫秒。\n     */\n    private static final Integer CONNECT_TIMEOUT = 6000;\n\n    /**\n     * 请求获取数据的超时时间(即响应时间)，单位毫秒。\n     */\n    private static final Integer SOCKET_TIMEOUT = 6000;\n\n\n    /**\n     * 发送get请求；不带请求头和请求参数\n     *\n     * @param url 请求地址\n     * @return\n     * @throws Exception\n     */\n    public static String doGet(String url) throws Exception {\n        return doGet(url, null, null);\n    }\n\n    /**\n     * 发送get请求；带请求参数\n     *\n     * @param url    请求地址\n     * @param params 请求参数集合\n     * @return\n     * @throws Exception\n     */\n    public static String doGet(String url, Map<String, String> params) throws Exception {\n        return doGet(url, null, params);\n    }\n\n    /**\n     * 发送get请求；带请求头和请求参数\n     *\n     * @param url     请求地址\n     * @param headers 请求头集合\n     * @param params  请求参数集合\n     * @return\n     * @throws Exception\n     */\n    public static String doGet(String url, Map<String, String> headers, Map<String, String> params) throws Exception {\n        // 创建httpClient对象\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n\n        // 创建访问的地址\n        URIBuilder uriBuilder = new URIBuilder(url);\n        if (params != null) {\n            Set<Map.Entry<String, String>> entrySet = params.entrySet();\n            for (Map.Entry<String, String> entry : entrySet) {\n                uriBuilder.setParameter(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // 创建http对象\n        HttpGet httpGet = new HttpGet(uriBuilder.build());\n        /**\n         * setConnectTimeout：设置连接超时时间，单位毫秒。\n         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection\n         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。\n         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。\n         * 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。\n         */\n        RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();\n        httpGet.setConfig(requestConfig);\n\n        // 设置请求头\n        packageHeader(headers, httpGet);\n\n        // 创建httpResponse对象\n        CloseableHttpResponse httpResponse = null;\n\n        //响应结果\n        String result = "";\n        try {\n\n            // 执行请求\n            httpResponse = httpClient.execute(httpGet);\n\n            // 获取返回结果\n            if (httpResponse != null && httpResponse.getStatusLine() != null) {\n                if (httpResponse.getEntity() != null) {\n                    result = EntityUtils.toString(httpResponse.getEntity(), ENCODING);\n                }\n            }\n        } finally {\n            // 释放资源\n            release(httpResponse, httpClient);\n        }\n\n        return result;\n    }\n\n    /**\n     * 发送post请求；不带请求头和请求参数\n     *\n     * @param url 请求地址\n     * @return\n     * @throws Exception\n     */\n    public static String doPost(String url) throws Exception {\n        return doPost(url, null, null);\n    }\n\n    /**\n     * 发送post请求；带请求参数\n     *\n     * @param url    请求地址\n     * @param params 参数集合\n     * @return\n     * @throws Exception\n     */\n    public static String doPost(String url, Map<String, Object> params) throws Exception {\n        return doPost(url, null, params);\n    }\n\n    /**\n     * 发送post请求；带请求头和请求参数\n     *\n     * @param url     请求地址\n     * @param headers 请求头集合\n     * @param params  请求参数集合\n     * @return\n     * @throws Exception\n     */\n    public static String doPost(String url, Map<String, String> headers, Map<String, Object> params) throws Exception {\n        // 创建httpClient对象\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n\n        // 创建http对象\n        HttpPost httpPost = new HttpPost(url);\n        /**\n         * setConnectTimeout：设置连接超时时间，单位毫秒。\n         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection\n         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。\n         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。\n         */\n        RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();\n        httpPost.setConfig(requestConfig);\n        // 设置请求头\n        /*httpPost.setHeader("Cookie", "");\n        httpPost.setHeader("Connection", "keep-alive");\n        httpPost.setHeader("Accept", "application/json");\n        httpPost.setHeader("Accept-Language", "zh-CN,zh;q=0.9");\n        httpPost.setHeader("Accept-Encoding", "gzip, deflate, br");\n        httpPost.setHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36");*/\n        packageHeader(headers, httpPost);\n\n        // 封装请求参数\n        packageParam(params, httpPost);\n\n        // 创建httpResponse对象\n        CloseableHttpResponse httpResponse = null;\n\n        String result = "";\n        try {\n\n            // 执行请求\n            httpResponse = httpClient.execute(httpPost);\n\n            // 获取返回结果\n            if (httpResponse != null && httpResponse.getStatusLine() != null) {\n                if (httpResponse.getEntity() != null) {\n                    result = EntityUtils.toString(httpResponse.getEntity(), ENCODING);\n                }\n            }\n\n        } finally {\n            // 释放资源\n            release(httpResponse, httpClient);\n        }\n        return result;\n    }\n\n\n    /**\n     * @Title:POST请求\n     * @Decription:发送POST请求，data参数只支持JSON对象（com.alibaba.fastjson.JSONObject）\n     * @param url  请求地址\n     * @param data 只支持JSON对象（com.alibaba.fastjson.JSONObject）\n     * @return String\n     */\n    public static String sendPost(String url, JSONObject data) throws IOException {\n        // 设置默认请求头\n        Map<String, String> headers = new HashMap<>();\n        headers.put("content-type", "application/json");\n\n        return doPostByJSON(url, headers, data, ENCODING);\n    }\n\n    /**\n     * @Title:POST请求\n     * @param url    请求地址\n     * @param params Map集合(输入参数要求为JSON对象)\n     * @return String\n     */\n    public static String sendPost(String url, Map<String, Object> params) throws IOException {\n        // 设置默认请求头\n        Map<String, String> headers = new HashMap<>();\n        headers.put("Content-Type", "application/json");\n        // 将map转成json\n        JSONObject data = JSONObject.parseObject(JSON.toJSONString(params));\n        return doPostByJSON(url, headers, data, ENCODING);\n    }\n\n    /**\n     * @Title POST请求\n     * @param url     请求地址\n     * @param headers Map集合的请求头信息\n     * @param data    只支持JSON对象（com.alibaba.fastjson.JSONObject）\n     * @return String\n     */\n    public static String sendPost(String url, Map<String, String> headers, JSONObject data) throws IOException {\n        return doPostByJSON(url, headers, data, ENCODING);\n    }\n\n\n    /**\n     * @Title POST请求（默认编码：UTF-8）\n     * @param url     请求地址\n     * @param headers Map集合的请求头参数\n     * @param params  Map集合(输入参数为JSON对象)\n     * @return String\n     */\n    public static String sendPost(String url, Map<String, String> headers, Map<String, String> params) throws IOException {\n        // 将map转成json\n        JSONObject data = JSONObject.parseObject(JSON.toJSONString(params));\n        return doPostByJSON(url, headers, data, ENCODING);\n    }\n\n    /**\n     * @Title: sendPost\n     * @Description: TODO(发送post请求)\n     * @author 郭鑫\n     * @date 2018年5月10日 下午4:36:17\n     * @param url      请求地址\n     * @param headers  请求头\n     * @param data     请求实体\n     * @param encoding 字符集\n     * @return String\n     * @throws IOException\n     */\n    private static String doPostByJSON(String url, Map<String, String> headers, JSONObject data, String encoding) throws IOException {\n        // 请求返回结果\n        String resultJson = null;\n        // 创建Client\n        CloseableHttpClient client = HttpClients.createDefault();\n        // 发送请求,返回响应对象\n        CloseableHttpResponse response = null;\n        // 创建HttpPost对象\n        HttpPost httpPost = new HttpPost();\n\n        /**\n         * setConnectTimeout：设置连接超时时间，单位毫秒。\n         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection\n         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。\n         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。\n         * 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。\n         */\n        RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();\n        httpPost.setConfig(requestConfig);\n\n        try {\n            // 设置请求地址\n            httpPost.setURI(new URI(url));\n            // 设置请求头\n            packageHeader(headers, httpPost);\n\n            // 设置实体\n            httpPost.setEntity(new StringEntity(JSON.toJSONString(data)));\n            // 发送请求,返回响应对象\n            response = client.execute(httpPost);\n            // 获取响应状态\n            int status = response.getStatusLine().getStatusCode();\n\n            if (status != HttpStatus.SC_OK) {\n                System.out.println("响应失败，状态码：" + status);\n            }\n            // 获取响应结果\n            resultJson = EntityUtils.toString(response.getEntity(), encoding);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            release(response, client);\n        }\n        return resultJson;\n    }\n\n    /**\n     * POST请求xml参数\n     * @param url\n     * @param requestDataXml\n     * @return String\n     */\n    public static String doPostByXml(String url, String requestDataXml) {\n        CloseableHttpClient httpClient = null;\n        CloseableHttpResponse response = null;\n        String result = "";\n\n        try {\n            //创建httpClient实例\n            httpClient = HttpClients.createDefault();\n            //创建httpPost远程连接实例\n            HttpPost httpPost = new HttpPost(url);\n            //配置请求参数实例\n            RequestConfig requestConfig = RequestConfig.custom()\n                    .setConnectTimeout(35000)//设置连接主机服务超时时间\n                    .setConnectionRequestTimeout(35000)//设置连接请求超时时间\n                    .setSocketTimeout(60000)//设置读取数据连接超时时间\n                    .build();\n            //为httpPost实例设置配置\n            httpPost.setConfig(requestConfig);\n            //设置请求参数\n            httpPost.setEntity(new StringEntity(requestDataXml,"UTF-8"));\n            //设置请求头内容\n            httpPost.addHeader("Content-Type","text/xml");\n\n            //执行post请求得到返回对象\n            response = httpClient.execute(httpPost);\n            //通过返回对象获取数据\n            HttpEntity entity = response.getEntity();\n            //将返回的数据转换为字符串\n            result = EntityUtils.toString(entity);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            if (null != response) {\n                try {\n                    response.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            if (null != httpClient) {\n                try {\n                    httpClient.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return result;\n    }\n\n\n    /**\n     * Description: 封装请求头\n     *\n     * @param params\n     * @param httpMethod\n     */\n    public static void packageHeader(Map<String, String> params, HttpRequestBase httpMethod) {\n        // 封装请求头\n        if (params != null) {\n            Set<Map.Entry<String, String>> entrySet = params.entrySet();\n            for (Map.Entry<String, String> entry : entrySet) {\n                // 设置到请求头到HttpRequestBase对象中\n                httpMethod.setHeader(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    /**\n     * Description: 封装请求参数\n     *\n     * @param params\n     * @param httpMethod\n     * @throws UnsupportedEncodingException\n     */\n    public static void packageParam(Map<String, Object> params, HttpEntityEnclosingRequestBase httpMethod)\n            throws UnsupportedEncodingException {\n        // 封装请求参数\n        if (null != params && params.size() > 0) {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            Set<Map.Entry<String, Object>> entrySet = params.entrySet();\n            for (Map.Entry<String, Object> entry : entrySet) {\n                nvps.add(new BasicNameValuePair(entry.getKey(), entry.getValue().toString()));\n            }\n\n            // 设置到请求的http对象中\n            httpMethod.setEntity(new UrlEncodedFormEntity(nvps, ENCODING));\n        }\n    }\n\n\n\n\n    /**\n     * @Title: sendGet\n     * @Description: TODO(发送get请求)\n     * @author wangxy\n     * @date 2018年5月14日 下午2:39:01\n     * @param url      请求地址\n     * @param params   请求参数\n     * @param encoding 编码\n     * @return String\n     * @throws IOException\n     */\n    private static String sendGet(String url, Map<String, Object> params, String encoding) throws IOException {\n        // 请求结果\n        String resultJson = null;\n        // 创建client\n        CloseableHttpClient client = HttpClients.createDefault();\n        //响应对象\n        CloseableHttpResponse response = null;\n        // 创建HttpGet\n        HttpGet httpGet = new HttpGet();\n        try {\n            // 创建uri\n            URIBuilder builder = new URIBuilder(url);\n            // 封装参数\n            if (params != null) {\n                for (String key : params.keySet()) {\n                    builder.addParameter(key, params.get(key).toString());\n                }\n            }\n            URI uri = builder.build();\n            // 设置请求地址\n            httpGet.setURI(uri);\n\n            //设置配置请求参数\n            RequestConfig requestConfig = RequestConfig.custom()\n                    .setConnectTimeout(35000)//连接主机服务超时时间\n                    .setConnectionRequestTimeout(35000)//请求超时时间\n                    .setSocketTimeout(60000)//数据读取超时时间\n                    .build();\n\n            // 发送请求，返回响应对象\n            response = client.execute(httpGet);\n            // 获取响应状态\n            int status = response.getStatusLine().getStatusCode();\n\n            if (status != HttpStatus.SC_OK) {\n                System.out.println("响应失败，状态码：" + status);\n            }\n\n            // 获取响应数据\n            resultJson = EntityUtils.toString(response.getEntity(), encoding);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            release(response, client);\n        }\n        return resultJson;\n    }\n\n\n    /**\n     * Description: 释放资源\n     *\n     * @param httpResponse\n     * @param httpClient\n     * @throws IOException\n     */\n    public static void release(CloseableHttpResponse httpResponse, CloseableHttpClient httpClient) throws IOException {\n        // 释放资源\n        if (httpResponse != null) {\n            httpResponse.close();\n        }\n        if (httpClient != null) {\n            httpClient.close();\n        }\n    }\n\n\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("随即数生成\n\npublic class RandomUtils {\n    public static String generateCode(int len) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i = 0; i < len; i++) {\n            stringBuilder.append(Math.round(Math.random()*9));\n        }\n        return stringBuilder.toString();\n    }\n}\n")])])])]),t._v(" "),n("h3",{attrs:{id:"_2-2写发送验证码接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2写发送验证码接口"}},[t._v("#")]),t._v(" 2.2写发送验证码接口")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    @ApiOperation(value = "发送验证码")\n    @PostMapping("/sms/send")\n    public R smsSend(@RequestBody MessageSendDto messageSendDto) throws Exception {\n        // 判断phone合法性\n        String phone = messageSendDto.getPhone();\n        // 生成验证码\n        String code = RandomUtils.generateCode(4);\n        // 存储到一个地方 redis\n        // 整理短信内容\n        String content = "凯信通,您的验证码是："+code;\n        // 发送请求 httpClient\n        Map<String, String> parasMap = new HashMap<>();\n        parasMap.put("appkey", "3020617669272767725ba8c5751c38cc");\n        parasMap.put("mobile", phone);\n        parasMap.put("content","【京东】你的验证码是："+code+"，3分钟内有效！");\n//        String result = HttpClientUtils.doGet("https://way.jd.com/kaixintong/kaixintong", parasMap);\n        // 模拟报文\n        String result="{\\n" +\n                "    \\"code\\": \\"10000\\",\\n" +\n                "    \\"charge\\": false,\\n" +\n                "    \\"remain\\": 0,\\n" +\n                "    \\"msg\\": \\"查询成功\\",\\n" +\n                "    \\"result\\": {\\n" +\n                "        \\"ReturnStatus\\": \\"Success\\",\\n" +\n                "        \\"Message\\": \\"ok\\",\\n" +\n                "        \\"RemainPoint\\": 940462,\\n" +\n                "        \\"TaskID\\": 80270110,\\n" +\n                "        \\"SuccessCounts\\": 1\\n" +\n                "    },\\n" +\n                "    \\"requestId\\": \\"0228838f4e2f4dd98513b6ae1033effb\\"\\n" +\n                "}";\n        // 对响应结果进行解析\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        String code1 = jsonObject.getString("code");\n        if(!"10000".equals(code1)){\n            return R.errorResult(100,"通讯异常");\n        }\n        JSONObject jsonObject1 = jsonObject.getJSONObject("result");\n        String returnstatus = jsonObject1.getString("ReturnStatus");\n        System.out.println(returnstatus);\n        if(!"Success".equals(returnstatus)){\n            return R.errorResult(100,"短信发送失败");\n        }\n        return R.okResult(code);\n    }\n')])])]),n("h3",{attrs:{id:"_2-3登录-其他-接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3登录-其他-接口"}},[t._v("#")]),t._v(" 2.3登录(其他)接口")]),t._v(" "),n("p",[t._v("添加验证码验证")])])}),[],!1,null,null,null);n.default=a.exports}}]);